            CLEAN CODE 

clean code is not about code that works , but is about the code which can be understand 
because a lot of time is spent to understand code and code should  be written in a way that is understandable 

when it comes to programming paradigm , which is  fundamental style or approach to programming â€” a way of thinking about and organizing code. It defines how programmers structure and execute their programs based on a specific methodology or philosophy.
Their are mainly four type 
    -1. Imperative Programming
    -2. Declarative Programming
    -3. Object-Oriented Programming (OOP)
    -4. Functional Programming

Depending upon the language these are taken in consideration



so what is clean code - the code which is readable and understandable 
            should be consise and to the point
            should avoid complex nesting and big code block
            follow common best practices and pattern 


Clean code doesn't mean your code should be typed strongly, strict typing just ensure readability and more importantly error handling 

Clean code & Patterns and Principle goes hand to hand , Patterns & Principle help in writing clean code , and writing readable and maintainable code helps in clean code too

Always question your existing code & refactor it a lot , that's best way to implement clean code 



1st Key Point 
    - Names 

Rule - Name should be meaningful
Well -named "Things" allow reader to understand your code without goint through it in detail

Their is always more than one way to name something, our focus should be , our names shouldn't be bad/ not-readable 


Naming Variables & Constants
    - use nouns or short phrases with adjactive 
    Eg - userData, isVaild


Naming Functions/ Methods 
    - think of it as commands that need to be executed 
    - use verbs or short phrase with adjactive 
    Eg- sendData() , inputIsVaild()


Naming Classes 
    - Use to create "things" 
    - Use nouns
    Eg- class User {} ,class RequestBody {}


CASING 
    - sanke_case : python 
    - camelCase : java , javascript
    - PascalCase : py, java, js (ClassName ) 
    - kekbab-case : HTML


Value is Object  , naming - user, database
Value is Number/String , naming - name, age
Value is Boolean , naming - isActive, loggedIn


Naming Function & Methods 
    - Based on Operations, Eg- getUser()
    - if it returns a boolean Eg - isVaild()

Naming classes 
    -Describe the object 
    Eg- User, Customer

Inside the class when we write methods
    we have getters and setter methods like getClientId 
    and when we use it as a property then  we also name it like a property even though it is a function 
    like user.clientId()


Comments & Code Formating 

only add comments if you want to explicitly describe something
make your code written in such a way that it automatically described itself 


Code Formating - improves readability 
    -Vertical Formating 
    - Horizontal Formating

Formating rules differ between languages

Search - [language] style guide 
        Eg- javascript style guide

Vertical Formating
    - space between line 
    -  make same content , together -> like a function is calling another function, try to put that function after the function is called 


Horizontal Formating 
    -  space between code 
    - indentation


While writing Functions
    - try to keep the parameters as minimum as possible 
    - but also keep your functions make in such a way that looking at it , we know what is it doing 

Functions should only do one thing , what is one thing 
    - Try spliting your code into multiple functions , these is known as abstractions meaning don't try to put all the code into one functions make small fucntions and add into one functions
    - in the end make code spliting only needed, no need to do it too much



Pure Functions 
    - gives same output , based on parameter and has no side effects.

ImPure Functions
    - gives different output, based on parameter and has side effect 
    what is a side effect -> when a function is called and not depending on the parameter the function does something , so independent of the parameter the function does something 

Law of Demeter 
    - you shouldn't access property of an object which you don't know about / object which is coming from outside / coming from API..
    - rather than write a code which handle it 

SOLID Principles 
    - Single Responsibility
    - Open-Closed Principle
    - Liskov Substitution Principle
    - Interface Segregation Principle
    - Dependency Inversion Principle


Single Responsibility - Classes should have a single responsibility - a class shouldn't change for more than one reason   
it doesn't mean that our class should only have single function / responsibility in it , it means that the business logic must be seperated 
like a class user has three functions , login, signup, assgin role , all these responsibility are allign to each other so no need to change anything 

Open-Closed Principle -  Open for extension but closed for modification 

Liskov Subsitution - Inheritance behaviour in simple words

Interface Segregation - Many client specific interface is better than general purpose interface

Dependecy Inversion - depend upon abstraction not concretions





  














